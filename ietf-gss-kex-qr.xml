<?xml version="1.0" encoding="US-ASCII"?>
<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
<!ENTITY RFC1321 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.1321.xml">
<!ENTITY RFC2045 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2045.xml">
<!ENTITY RFC2119 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2119.xml">
<!ENTITY RFC4462 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.4462.xml">
<!ENTITY RFC6194 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.6194.xml">
<!ENTITY RFC6234 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.6234.xml">
<!ENTITY RFC7546 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.7546.xml">
<!ENTITY RFC8174 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.8174.xml">
]>
<?xml-stylesheet type="text/xsl" href="rfc2629.xslt"?>

<?rfc compact="yes"?>
<?rfc subcompact="no"?>
<?rfc toc="yes"?>
<?rfc sortrefs="yes"?>
<?rfc symrefs="yes"?>
<?rfc rfcedstyle="yes"?>
<?rfc autobreaks="yes"?>
<?rfc docmapping="yes"?>

<rfc category="std" docName="draft-kario-gss-kex-qr-01"
     ipr="trust200902" updates="4462">
  <front>
    <title abbrev="GSS Keyex QR">Quantum-Resistant GSS-API Key Exchange for SSH</title>

    <author fullname="Hubert Kario" initials="H." surname="Kario">
      <organization>Red Hat, Inc.</organization>

      <address>
        <postal>
          <street>Purkynova 115</street>

          <city>Brno</city>

          <code>612 00</code>

          <country>Czech Republic</country>
        </postal>

        <email>hkario@redhat.com</email>
      </address>
    </author>

    <date month="Sep" year="2020" />

    <area>Security</area>

    <workgroup>Internet Engineering Task Force</workgroup>

    <abstract>
      <t>This document specifies additions and amendments to RFC4462.
          It defines a new key exchange method that uses GSS-API in a way to
          provide key exchange method that is resistant to attacks by
          quantum computers.
          The purpose of this specification is to provide an easy-to-implement
          upgrade to environments that require resistance against quantum
          computers before widely accepted post-quantum cryptography
          algorithms are established.</t>
    </abstract>
  </front>


  <middle>
    <section title="Introduction">
      <t><xref target="RFC4462">SSH GSS-API Methods</xref> allows the use of
          GSSAPI for authentication and key exchange in SSH. Unfortunately
          for resistance against quantum computers all of the methods in
          RFC 4462 as well as all of the new methods introduced in
          <xref target="RFC8732">SSH GSS-API SHA-2 Methods</xref> derive
          their security from Finite-Field Diffie-Hellman or Elliptic Curve
          Diffie-Hellman key exchanges. Both FFDH and ECDH are believed
          to be vulnerable to Shor's algorithm running on quantum computers.
          This document updates RFC4462 with new methods intended for use
          in environments where use of quantum resistant algorithms
          is more important that the forward secrecy provided by FFDH and ECDH.
          </t>
    </section>

    <section title="Rationale">
      <t>Due to security concerns with FFDH and ECDH against attacks using
          quantum computers, we propose a new key exchange method that does
          not use FFDH or ECDH to agree on a shared secret to derive later
          encryption keys but rather uses GSS-API as a secure communication
          channel to exchange secrets that are then used to derive
          encryption keys</t>.
      <t>To provide resistance against quantum computer attacks the connection
          needs to also carefully select encryption ciphers, and host
          authentication methods.</t>
    </section>

    <section title="Document Conventions">
      <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL
      NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED",
      "MAY", and "OPTIONAL" in this document are to be interpreted as
      described in BCP 14 <xref target="RFC2119">RFC2119</xref>
      <xref target="RFC8174">RFC8174</xref> when, and only when, they
      appear in all capitals, as shown here.</t>
    </section>

    <section title="New Quantum Resistant Key Exchange Methods">
      <t>This document adopts the same naming convention as defined in <xref
        target="RFC4462"/> to define families of methods that cover any
          GSS-API mechanism used with a specific SHA-2 Hash. It also
          reuses much of the the scheme defined in Section 2.1 of
          <xref target="RFC4462"/>.
      </t>
      <texttable>
        <preamble>The following new key exchange algorithms are defined:
        </preamble>
          <ttcol align="left">Key Exchange Method Name</ttcol>
          <ttcol align="left">Implementation Recommendations</ttcol>
          <c>gss-qr-sha256-*</c><c>SHOULD/RECOMMENDED</c>
          <c>gss-qr-sha512-*</c><c>MAY/OPTIONAL</c>
      </texttable>
      <t>Each key exchange method is implicitly registered by this document.
        The IESG is considered to be the owner of all these key exchange
        methods; this does NOT imply that the IESG is considered to be the
        owner of the underlying GSS-API mechanism.
      </t>
      <t>
        Each method in any family of methods specifies GSS-API-authenticated
        exchanges as described in Section 2.1 of <xref
        target="RFC4462"/>. The method name for each method is the
        concatenation of the family name prefix with the Base64 encoding of
        the MD5 hash <xref target="RFC1321"/> of the ASN.1 DER encoding
        <xref target="ISO-IEC-8825-1"/> of the underlying GSS-API
        mechanism's OID. Base64 encoding is described in Section 6.8 of
        <xref target="RFC2045"/>.</t>
      <texttable>
        <preamble>Family method references</preamble>
          <ttcol align="left">Family Name prefix</ttcol>
          <ttcol align="left">Hash Function</ttcol>
          <c>gss-qr-sha256-</c><c>SHA-256</c>
          <c>gss-qr-sha512-</c><c>SHA-512</c>
      </texttable>
      <section title="Generic Quantum Resistant GSS-API key Exchange">
        <t>This section reuses much of the scheme defined in Section 2.1
            of <xref target="RFC4462"/> though it does not transport FFDH
            key shares in the exchanged messages.
        </t>
        <t>This section defers to <xref target="RFC7546"/> as the source of
            information on GSS-API context establishment operations,
            Section 3 being the most relevant. All security considerations
            described in <xref target="RFC7546"/> apply here too.
        </t>
        <t>The parties generate nonces in the key exchange.
            The generated nonces MUST be at least 256 bits long and come from a
            quantum safe CSPRNG. The nonces MUST NOT be reused in other key
            exchanges.
        </t>
        <t>The client initiates negotiation by calling GSS_Init_sec_context()
            and the server responds to it by calling GSS_Accept_sec_context().
            For the negotiation, client MUST set the mutual_req_flag,
            conf_req_flag, and integ_req_flag flag to "true". In addition,
            deleg_req_flag MAY be set to "true" to request access delegation,
            if requested by the user. Since the key exchange process
            authenticates only the host, the setting of anon_req_flag is
            immaterial to this process. If the client does not support the
            "gssapi-keyex" user authentication method described in Section 4
            of <xref target="RFC4462"/>, or does not intend to use that method
            in conjunction with the GSS-API context established during key
            exchange, then anon_req_flag SHOULD be set to "true". Otherwise,
            this flag MAY be set to true if the client wishes to hide its
            identity. This key exchange process will exchange only a single
            message token once the context has been established; therefore, the
            replay_det_req_flag and sequence_req_flag SHOULD be set to "false".
         </t>
         <t>During GSS context establishment, multiple tokens may be exchanged
             by the client and the server. When the GSS context is established
             (major_status is GSS_S_COMPLETE), the parties check that
             mutual_state and integ_avail are both "true".  If not, the key
             exchange MUST fail.
         </t>
         <t>To verify the integrity of the handshake both peers use the Hash
             Function defined by the selected Key Exchange method to calculate
             the running hash of exchanged messages, H_S and H_C.
         </t>

         <t>H_S = hash(V_C || V_S || I_C || KC_S || ... || KC_C).</t>

         <t>H_C = hash(V_C || V_S || I_C || KC_S || ... || KC_C || KC).</t>

         <t>The GSS_wrap() call is used by the server and client to encrypt
             the calculated hash and the selected nonce. The peers use
             the GSS_unwrap() to decrypt the value used to check if the other
             peer has received the same messages and to get the nonce it
             selected.
         </t>
         <t>Peers MUST verify if the length of the selected nonce is not
             shorter than 32 octets. If the received nonce is shorter, the
             key exchange MUST fail.

        <t>The following is an overview of the key exchange process:
          <figure>
            <artwork>
      Client                                                Server
      ------                                                ------
      Calls GSS_Init_sec_context().
      SSH_MSG_KEXGSS_INIT  ---------------&gt;

  (Loop)
  |                                    Calls GSS_Accept_sec_context().
  |                           &lt;------------ SSH_MSG_KEXGSS_CONTINUE
  |   Calls GSS_Init_sec_context().
  |   SSH_MSG_KEXGSS_CONTINUE ------------&gt;

                                       Calls GSS_Accept_sec_context().
                                            Generates ephemeral nonce.
                                                    Computes hash H_S.
                                     Calls GSS_wrap( H_S || nonce_S ).
                              &lt;------------ SSH_MSG_KEXGSS_COMPLETE

      Computes hash H_S.
      Calls GSS_unwrap().
      Verifies that computed H_S matches received value.
      Computes hash H_C.
      Generates ephemeral nonce.
      Calls GSS_wrap( H_C || nonce_C ).
      SSH_MSG_KEXGSS_COMPLETE ------------&gt;
                                                   Calls GSS_unwrap().
                                                    Computes hash H_C.
                    Verifies that computed H_C matches received value.
            </artwork>
          </figure>
        </t>

    <t>This is implemented with the following messages:</t>
        <figure>
          <preamble>The client sends:</preamble>
          <artwork>
    byte      SSH_MSG_KEXGSS_INIT
    string    output_token (from GSS_Init_sec_context())
          </artwork>
        </figure>
          <preamble>The server sends:</preamble>
          <artwork>
    byte      SSH_MSG_KEXGSS_CONTINUE
    string    output_token (from GSS_Accept_sec_context())
          </artwork>
        </figure>
        <t>Each time the client receives the message described above, it
        makes another call to GSS_Init_sec_context().</t>
        <figure>
          <preamble>The client sends:</preamble>
          <artwork>
    byte      SSH_MSG_KEXGSS_CONTINUE
    string    output_token (from GSS_Init_sec_context())
          </artwork>
        </figure>
        <figure>
          <preamble>The final server message is either:</preamble>
          <artwork>
    byte      SSH_MSG_KEXGSS_COMPLETE
    string    enc_nonce (GSS_wrap() of H_S and nonce_S)
    boolean   TRUE
    string    output_token (from GSS_Accept_sec_context())
          </artwork>
        </figure>
        <figure>
          <preamble>Or the following if no output_token is available:</preamble>
          <artwork>
    byte      SSH_MSG_KEXGSS_COMPLETE
    string    enc_nonce (GSS_wrap() of H_S and nonce_S)
    boolean   FALSE
          </artwork>
        </figure>
        <figure>
          <preamble>As the final message the client sends either:</preamble>
          <artwork>
    byte      SSH_MSG_KEXGSS_COMPLETE
    string    enc_nonce (GSS_wrap() of H_C and nonce_C)
    boolean   TRUE
    string    output_token (from GSS_Accept_sec_context())
          </artwork>
        </figure>
        <figure>
          <preamble>Or the following if no output_token is available:</preamble>
          <artwork>
    byte      SSH_MSG_KEXGSS_COMPLETE
    string    enc_nonce (GSS_wrap() of H_C and nonce_C)
    boolean   FALSE
          </artwork>
        </figure>
        <figure>
          <preamble>The hashes H_S and H_C are computed as the HASH hash of the
          concatenation of the following:</preamble>
          <artwork>
    string    V_C, the client's version string (CR, NL excluded)
    string    V_S, server's version string (CR, NL excluded)
    string    I_C, payload of the client's SSH_MSG_KEXINIT
    string    I_S, payload of the server's SSH_MSG_KEXINIT
    string    KC_S, payload of the server's SSH_MSG_KEXGSS_CONTINUE
    string    KC_C, payload of the client's SSH_MSG_KEXGSS_CONTINUE
    string    KC_S, payload of the server's second SSH_MSG_KEXGSS_CONTINUE
    string    KC_C, payload of the client's second SSH_MSG_KEXGSS_CONTINUE
    ...
    string    KC, payload of the server's SSH_MSG_KEXGSS_COMPLETE
          </artwork>
        </figure>

      <t>Those values are called exchange hashs, and they are used to
        authenticate the key exchange. The exchange hashes SHOULD be kept
        secret. If no SSH_MSG_KEXGSS_CONTINUE messages have been sent by the
        server or received by the client, then an empty string is used in
        place of KC_S and KC_C when computing the exchange hash.
        When multiple SSH_MSG_KEXGSS_CONTINUE messages have been sent
        by either side, then they should all be included in the exchange
        hash, in order they have been processed by both sides of the connection.
        For the H_S hash, the KC is an empty string.
      </t>

      <t>Once a party has both the server nonce (nonce_S) and the client
          nonce (nonce_C) it concatenates them, in this order, to compute the
          used shared secret K:</t>
      <t>K = nonce_S || nonce_C</t>

       <t>If the client receives a SSH_MSG_KEXGSS_CONTINUE message after
        a call to GSS_Init_sec_context() has returned a major_status code
        of GSS_S_COMPLETE, a protocol error has occurred and the key
        exchange MUST fail.</t>

       <t>If the client receives a SSH_MSG_KEXGSS_COMPLETE message and a
        call to GSS_Init_sec_context() does not result in a major_status
        code of GSS_S_COMPLETE, a protocol error has occurred and the key
        exchange MUST fail.</t>

      </section>
    </section>

    <section title="IANA Considerations">
      <t>This document augments the SSH Key Exchange Method Names in <xref
      target="RFC4462"/>.</t>
      <texttable>
        <preamble>IANA is requested to update the <xref
        target="IANA-KEX-NAMES">SSH Protocol Parameters</xref> registry
        with the following entries:</preamble>
          <ttcol align="left">Key Exchange Method Name</ttcol>
          <ttcol align="left">Reference</ttcol>
          <c>gss-qr-sha256-*</c><c>This draft</c>
          <c>gss-qr-sha512-*</c><c>This draft</c>
      </texttable>
    </section>

    <section title="Security Considerations">
      <section title="Symmetric cipher security">
        <t>Current understanding of quantum computer capabilities suggest
            that symmetric ciphers with keys smaller than 256 bits will
            require less than the current recommended minimal work factor
            of 2^128 operations. As such, connections that use this
            key exchange methods MUST use ciphers with at least
            256 bit keys to retain quantum resistance.
        </t>
      </section>
      <section title="User authentication">
        <t>TODO:  explain that user auth can't use asymmetric crypto, thus
            only gssapi-keyex, password or keyboard-interactive should be used</t>
      </section>
      <section title="Used GSSAPI Mechanisms">
        <t>The security of the key exchange depends on the security of the
            used GSSAPI mechanism. The described key exchange will be quantum
            resistant only in case the used GSSAPI mechanism is quantum
            resistant.
        </t>
        <t>For example, the Kerberos 5 mechanism is quantum resistant only when
            it's used together with algorithms and key sizes that are quantum
            resistant. Quantum safe algorithm SHOULD be used throught the
            kerberos infrastructure, both for authentication and encryption.
            Currently aes256-cts-hmac-sha384-192 mechanism defined
            in <xref target="RFC8009"/> for encryption is an example
            of such an algorithm.</t>
      </section>
      <section title="GSSAPI Delegation">
        <t>Some GSSAPI mechanisms can act on a request to delegate credentials
        to the target host when the deleg_req_flag is set. In this case, extra
        care must be taken to ensure that the acceptor being authenticated
        matches the target the user intended. Some mechanisms implementations
        (like commonly used krb5 libraries) may use insecure DNS resolution to
        canonicalize the target name; in these cases spoofing a DNS response
        that points to an attacker-controlled machine may results in the user
        silently delegating credentials to the attacker, who can then
        impersonate the user at will.</t>
      </section>
    </section>

  </middle>

  <back>
<?rfc rfcedstyle="no"?>
    <references title="Normative References">

      &RFC1321;
      &RFC2045;

      <!--SSH GSS-API Methods-->

      &RFC4462;

      &RFC7546;

      <!--Key words for use in RFCs to Indicate Requirement Levels-->

      &RFC2119;

      &RFC8174;

    </references>

    <references title="Informative References">

      &RFC6194;

      <!--SHA-2-->

      &RFC6234;

      <reference
          anchor="ISO-IEC-8825-1"
          target="http://standards.iso.org/ittf/PubliclyAvailableStandards/c068345_ISO_IEC_8825-1_2015.zip">
        <front>
          <title>ASN.1 encoding rules: Specification of Basic Encoding Rules
          (BER), Canonical Encoding Rules (CER) and Distinguished Encoding
          Rules (DER)</title>
          <author>
            <organization>International Organization for Standardization /
            International Electrotechnical Commission</organization>
          </author>
          <date day="15" month="November" year="2015"/>
        </front>
        <seriesInfo name="ISO/IEC" value="8825-1"/>
      </reference>

      <reference
          anchor="NIST-SP-800-131Ar1"
          target="http://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-131Ar1.pdf">
        <front>
          <title>Transitions: Recommendation for Transitioning of
          the Use of Cryptographic Algorithms and Key Lengths</title>
          <author>
            <organization
                abbrev="NIST">National Institute of Standards and Technology
            </organization>
          </author>
          <date month="November" year="2015"/>
        </front>
        <seriesInfo
            name="NIST Special Publication"
            value="800-131A Revision 1"/>
       </reference>

      <reference
          anchor="IANA-KEX-NAMES"
          target="https://www.iana.org/assignments/ssh-parameters/ssh-parameters.xhtml#ssh-parameters-16">
        <front>
          <title> Secure Shell (SSH) Protocol Parameters: Key Exchange Method Names</title>
          <author>
            <organization
                abbrev="IANA">Internet Assigned Numbers Authority
            </organization>
          </author>
          <date day="2" month="June" year="2005"/>
        </front>
      </reference>
    </references>

  </back>
</rfc>
